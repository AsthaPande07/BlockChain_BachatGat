/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface SavingsPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "autoDebit"
      | "chitPoolBalance"
      | "chitShareBps"
      | "contribute"
      | "contributedRound"
      | "contributionAmount"
      | "creditScore"
      | "currentRound"
      | "cycleNumber"
      | "drawWinner"
      | "emergencyPool"
      | "extraGracePeriod"
      | "extraGraceReputationThreshold"
      | "extraGraceUsed"
      | "fundChitPool"
      | "getMembers"
      | "graceDeadline"
      | "gracePeriod"
      | "lastContributionTimestamp"
      | "lastPaidCycle"
      | "markMissedAndStartGrace"
      | "monthlyCycle"
      | "numPaidInCycle"
      | "owner"
      | "raiseEmergency"
      | "registerMember"
      | "renounceOwnership"
      | "reputation"
      | "requestExtraGrace"
      | "setCreditScore"
      | "setEmergencyPool"
      | "setExtraGracePeriod"
      | "setExtraGraceReputationThreshold"
      | "setGracePeriod"
      | "setMonthlyCycle"
      | "setReputation"
      | "signCommitment"
      | "signedCommitment"
      | "token"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AutoDebitFailed"
      | "CommitmentSigned"
      | "ContributionReceived"
      | "ExtraGraceRequested"
      | "MemberRegistered"
      | "OwnershipTransferred"
      | "WinnerSelected"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "autoDebit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "chitPoolBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chitShareBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contributedRound",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contributionAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditScore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cycleNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "drawWinner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extraGracePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extraGraceReputationThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extraGraceUsed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fundChitPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMembers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "graceDeadline",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "gracePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastContributionTimestamp",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastPaidCycle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "markMissedAndStartGrace",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "monthlyCycle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numPaidInCycle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "raiseEmergency",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerMember",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reputation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestExtraGrace",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCreditScore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyPool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setExtraGracePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExtraGraceReputationThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGracePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMonthlyCycle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReputation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "signCommitment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signedCommitment",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "autoDebit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chitPoolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chitShareBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contributedRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cycleNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drawWinner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extraGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extraGraceReputationThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extraGraceUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundChitPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMembers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "graceDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastContributionTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastPaidCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markMissedAndStartGrace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "monthlyCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numPaidInCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "raiseEmergency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reputation", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestExtraGrace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCreditScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExtraGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExtraGraceReputationThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMonthlyCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signedCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace AutoDebitFailedEvent {
  export type InputTuple = [who: AddressLike];
  export type OutputTuple = [who: string];
  export interface OutputObject {
    who: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CommitmentSignedEvent {
  export type InputTuple = [who: AddressLike];
  export type OutputTuple = [who: string];
  export interface OutputObject {
    who: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContributionReceivedEvent {
  export type InputTuple = [
    who: AddressLike,
    amount: BigNumberish,
    chitShare: BigNumberish,
    insuranceShare: BigNumberish,
    round: BigNumberish
  ];
  export type OutputTuple = [
    who: string,
    amount: bigint,
    chitShare: bigint,
    insuranceShare: bigint,
    round: bigint
  ];
  export interface OutputObject {
    who: string;
    amount: bigint;
    chitShare: bigint;
    insuranceShare: bigint;
    round: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExtraGraceRequestedEvent {
  export type InputTuple = [who: AddressLike, newDeadline: BigNumberish];
  export type OutputTuple = [who: string, newDeadline: bigint];
  export interface OutputObject {
    who: string;
    newDeadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemberRegisteredEvent {
  export type InputTuple = [who: AddressLike];
  export type OutputTuple = [who: string];
  export interface OutputObject {
    who: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinnerSelectedEvent {
  export type InputTuple = [
    who: AddressLike,
    payout: BigNumberish,
    round: BigNumberish
  ];
  export type OutputTuple = [who: string, payout: bigint, round: bigint];
  export interface OutputObject {
    who: string;
    payout: bigint;
    round: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SavingsPool extends BaseContract {
  connect(runner?: ContractRunner | null): SavingsPool;
  waitForDeployment(): Promise<this>;

  interface: SavingsPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  autoDebit: TypedContractMethod<[member: AddressLike], [void], "nonpayable">;

  chitPoolBalance: TypedContractMethod<[], [bigint], "view">;

  chitShareBps: TypedContractMethod<[], [bigint], "view">;

  contribute: TypedContractMethod<[], [void], "nonpayable">;

  contributedRound: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  contributionAmount: TypedContractMethod<[], [bigint], "view">;

  creditScore: TypedContractMethod<[], [string], "view">;

  currentRound: TypedContractMethod<[], [bigint], "view">;

  cycleNumber: TypedContractMethod<[], [bigint], "view">;

  drawWinner: TypedContractMethod<
    [externalRandom: BigNumberish],
    [void],
    "nonpayable"
  >;

  emergencyPool: TypedContractMethod<[], [string], "view">;

  extraGracePeriod: TypedContractMethod<[], [bigint], "view">;

  extraGraceReputationThreshold: TypedContractMethod<[], [bigint], "view">;

  extraGraceUsed: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  fundChitPool: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getMembers: TypedContractMethod<[], [string[]], "view">;

  graceDeadline: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  gracePeriod: TypedContractMethod<[], [bigint], "view">;

  lastContributionTimestamp: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  lastPaidCycle: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  markMissedAndStartGrace: TypedContractMethod<
    [member: AddressLike],
    [void],
    "nonpayable"
  >;

  monthlyCycle: TypedContractMethod<[], [bigint], "view">;

  numPaidInCycle: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  raiseEmergency: TypedContractMethod<
    [eventId: BytesLike, evidenceURI: string],
    [bigint],
    "nonpayable"
  >;

  registerMember: TypedContractMethod<[], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  reputation: TypedContractMethod<[], [string], "view">;

  requestExtraGrace: TypedContractMethod<[], [void], "nonpayable">;

  setCreditScore: TypedContractMethod<[cs: AddressLike], [void], "nonpayable">;

  setEmergencyPool: TypedContractMethod<
    [ep: AddressLike],
    [void],
    "nonpayable"
  >;

  setExtraGracePeriod: TypedContractMethod<
    [seconds_: BigNumberish],
    [void],
    "nonpayable"
  >;

  setExtraGraceReputationThreshold: TypedContractMethod<
    [v: BigNumberish],
    [void],
    "nonpayable"
  >;

  setGracePeriod: TypedContractMethod<
    [seconds_: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMonthlyCycle: TypedContractMethod<
    [seconds_: BigNumberish],
    [void],
    "nonpayable"
  >;

  setReputation: TypedContractMethod<[rep: AddressLike], [void], "nonpayable">;

  signCommitment: TypedContractMethod<[], [void], "nonpayable">;

  signedCommitment: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  token: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "autoDebit"
  ): TypedContractMethod<[member: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "chitPoolBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "chitShareBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "contribute"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "contributedRound"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "contributionAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "creditScore"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "currentRound"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "cycleNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "drawWinner"
  ): TypedContractMethod<[externalRandom: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyPool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "extraGracePeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "extraGraceReputationThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "extraGraceUsed"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "fundChitPool"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getMembers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "graceDeadline"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "gracePeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastContributionTimestamp"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastPaidCycle"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "markMissedAndStartGrace"
  ): TypedContractMethod<[member: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "monthlyCycle"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "numPaidInCycle"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "raiseEmergency"
  ): TypedContractMethod<
    [eventId: BytesLike, evidenceURI: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerMember"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reputation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "requestExtraGrace"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCreditScore"
  ): TypedContractMethod<[cs: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEmergencyPool"
  ): TypedContractMethod<[ep: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setExtraGracePeriod"
  ): TypedContractMethod<[seconds_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setExtraGraceReputationThreshold"
  ): TypedContractMethod<[v: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGracePeriod"
  ): TypedContractMethod<[seconds_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMonthlyCycle"
  ): TypedContractMethod<[seconds_: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setReputation"
  ): TypedContractMethod<[rep: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "signCommitment"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "signedCommitment"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AutoDebitFailed"
  ): TypedContractEvent<
    AutoDebitFailedEvent.InputTuple,
    AutoDebitFailedEvent.OutputTuple,
    AutoDebitFailedEvent.OutputObject
  >;
  getEvent(
    key: "CommitmentSigned"
  ): TypedContractEvent<
    CommitmentSignedEvent.InputTuple,
    CommitmentSignedEvent.OutputTuple,
    CommitmentSignedEvent.OutputObject
  >;
  getEvent(
    key: "ContributionReceived"
  ): TypedContractEvent<
    ContributionReceivedEvent.InputTuple,
    ContributionReceivedEvent.OutputTuple,
    ContributionReceivedEvent.OutputObject
  >;
  getEvent(
    key: "ExtraGraceRequested"
  ): TypedContractEvent<
    ExtraGraceRequestedEvent.InputTuple,
    ExtraGraceRequestedEvent.OutputTuple,
    ExtraGraceRequestedEvent.OutputObject
  >;
  getEvent(
    key: "MemberRegistered"
  ): TypedContractEvent<
    MemberRegisteredEvent.InputTuple,
    MemberRegisteredEvent.OutputTuple,
    MemberRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "WinnerSelected"
  ): TypedContractEvent<
    WinnerSelectedEvent.InputTuple,
    WinnerSelectedEvent.OutputTuple,
    WinnerSelectedEvent.OutputObject
  >;

  filters: {
    "AutoDebitFailed(address)": TypedContractEvent<
      AutoDebitFailedEvent.InputTuple,
      AutoDebitFailedEvent.OutputTuple,
      AutoDebitFailedEvent.OutputObject
    >;
    AutoDebitFailed: TypedContractEvent<
      AutoDebitFailedEvent.InputTuple,
      AutoDebitFailedEvent.OutputTuple,
      AutoDebitFailedEvent.OutputObject
    >;

    "CommitmentSigned(address)": TypedContractEvent<
      CommitmentSignedEvent.InputTuple,
      CommitmentSignedEvent.OutputTuple,
      CommitmentSignedEvent.OutputObject
    >;
    CommitmentSigned: TypedContractEvent<
      CommitmentSignedEvent.InputTuple,
      CommitmentSignedEvent.OutputTuple,
      CommitmentSignedEvent.OutputObject
    >;

    "ContributionReceived(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ContributionReceivedEvent.InputTuple,
      ContributionReceivedEvent.OutputTuple,
      ContributionReceivedEvent.OutputObject
    >;
    ContributionReceived: TypedContractEvent<
      ContributionReceivedEvent.InputTuple,
      ContributionReceivedEvent.OutputTuple,
      ContributionReceivedEvent.OutputObject
    >;

    "ExtraGraceRequested(address,uint256)": TypedContractEvent<
      ExtraGraceRequestedEvent.InputTuple,
      ExtraGraceRequestedEvent.OutputTuple,
      ExtraGraceRequestedEvent.OutputObject
    >;
    ExtraGraceRequested: TypedContractEvent<
      ExtraGraceRequestedEvent.InputTuple,
      ExtraGraceRequestedEvent.OutputTuple,
      ExtraGraceRequestedEvent.OutputObject
    >;

    "MemberRegistered(address)": TypedContractEvent<
      MemberRegisteredEvent.InputTuple,
      MemberRegisteredEvent.OutputTuple,
      MemberRegisteredEvent.OutputObject
    >;
    MemberRegistered: TypedContractEvent<
      MemberRegisteredEvent.InputTuple,
      MemberRegisteredEvent.OutputTuple,
      MemberRegisteredEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "WinnerSelected(address,uint256,uint256)": TypedContractEvent<
      WinnerSelectedEvent.InputTuple,
      WinnerSelectedEvent.OutputTuple,
      WinnerSelectedEvent.OutputObject
    >;
    WinnerSelected: TypedContractEvent<
      WinnerSelectedEvent.InputTuple,
      WinnerSelectedEvent.OutputTuple,
      WinnerSelectedEvent.OutputObject
    >;
  };
}
