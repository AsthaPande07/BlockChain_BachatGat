/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CreditScoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "decreaseCreditScore"
      | "getCreditScore"
      | "increaseCreditScore"
      | "owner"
      | "renounceOwnership"
      | "setInitial"
      | "setTrustedCaller"
      | "transferOwnership"
      | "trustedCaller"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CreditScoreDecreased"
      | "CreditScoreSet"
      | "CreditScoreUpdated"
      | "OwnershipTransferred"
      | "TrustedCallerUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "decreaseCreditScore",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditScore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseCreditScore",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setInitial",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedCaller",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedCaller",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "decreaseCreditScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseCreditScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setInitial", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedCaller",
    data: BytesLike
  ): Result;
}

export namespace CreditScoreDecreasedEvent {
  export type InputTuple = [user: AddressLike, newScore: BigNumberish];
  export type OutputTuple = [user: string, newScore: bigint];
  export interface OutputObject {
    user: string;
    newScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreditScoreSetEvent {
  export type InputTuple = [user: AddressLike, score: BigNumberish];
  export type OutputTuple = [user: string, score: bigint];
  export interface OutputObject {
    user: string;
    score: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreditScoreUpdatedEvent {
  export type InputTuple = [user: AddressLike, newScore: BigNumberish];
  export type OutputTuple = [user: string, newScore: bigint];
  export interface OutputObject {
    user: string;
    newScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrustedCallerUpdatedEvent {
  export type InputTuple = [who: AddressLike, allowed: boolean];
  export type OutputTuple = [who: string, allowed: boolean];
  export interface OutputObject {
    who: string;
    allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CreditScore extends BaseContract {
  connect(runner?: ContractRunner | null): CreditScore;
  waitForDeployment(): Promise<this>;

  interface: CreditScoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  decreaseCreditScore: TypedContractMethod<
    [user: AddressLike, pts: BigNumberish],
    [void],
    "nonpayable"
  >;

  getCreditScore: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  increaseCreditScore: TypedContractMethod<
    [user: AddressLike, pts: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setInitial: TypedContractMethod<
    [user: AddressLike, score: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTrustedCaller: TypedContractMethod<
    [who: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  trustedCaller: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "decreaseCreditScore"
  ): TypedContractMethod<
    [user: AddressLike, pts: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCreditScore"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "increaseCreditScore"
  ): TypedContractMethod<
    [user: AddressLike, pts: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setInitial"
  ): TypedContractMethod<
    [user: AddressLike, score: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTrustedCaller"
  ): TypedContractMethod<
    [who: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "trustedCaller"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getEvent(
    key: "CreditScoreDecreased"
  ): TypedContractEvent<
    CreditScoreDecreasedEvent.InputTuple,
    CreditScoreDecreasedEvent.OutputTuple,
    CreditScoreDecreasedEvent.OutputObject
  >;
  getEvent(
    key: "CreditScoreSet"
  ): TypedContractEvent<
    CreditScoreSetEvent.InputTuple,
    CreditScoreSetEvent.OutputTuple,
    CreditScoreSetEvent.OutputObject
  >;
  getEvent(
    key: "CreditScoreUpdated"
  ): TypedContractEvent<
    CreditScoreUpdatedEvent.InputTuple,
    CreditScoreUpdatedEvent.OutputTuple,
    CreditScoreUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TrustedCallerUpdated"
  ): TypedContractEvent<
    TrustedCallerUpdatedEvent.InputTuple,
    TrustedCallerUpdatedEvent.OutputTuple,
    TrustedCallerUpdatedEvent.OutputObject
  >;

  filters: {
    "CreditScoreDecreased(address,uint256)": TypedContractEvent<
      CreditScoreDecreasedEvent.InputTuple,
      CreditScoreDecreasedEvent.OutputTuple,
      CreditScoreDecreasedEvent.OutputObject
    >;
    CreditScoreDecreased: TypedContractEvent<
      CreditScoreDecreasedEvent.InputTuple,
      CreditScoreDecreasedEvent.OutputTuple,
      CreditScoreDecreasedEvent.OutputObject
    >;

    "CreditScoreSet(address,uint256)": TypedContractEvent<
      CreditScoreSetEvent.InputTuple,
      CreditScoreSetEvent.OutputTuple,
      CreditScoreSetEvent.OutputObject
    >;
    CreditScoreSet: TypedContractEvent<
      CreditScoreSetEvent.InputTuple,
      CreditScoreSetEvent.OutputTuple,
      CreditScoreSetEvent.OutputObject
    >;

    "CreditScoreUpdated(address,uint256)": TypedContractEvent<
      CreditScoreUpdatedEvent.InputTuple,
      CreditScoreUpdatedEvent.OutputTuple,
      CreditScoreUpdatedEvent.OutputObject
    >;
    CreditScoreUpdated: TypedContractEvent<
      CreditScoreUpdatedEvent.InputTuple,
      CreditScoreUpdatedEvent.OutputTuple,
      CreditScoreUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TrustedCallerUpdated(address,bool)": TypedContractEvent<
      TrustedCallerUpdatedEvent.InputTuple,
      TrustedCallerUpdatedEvent.OutputTuple,
      TrustedCallerUpdatedEvent.OutputObject
    >;
    TrustedCallerUpdated: TypedContractEvent<
      TrustedCallerUpdatedEvent.InputTuple,
      TrustedCallerUpdatedEvent.OutputTuple,
      TrustedCallerUpdatedEvent.OutputObject
    >;
  };
}
