/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ReputationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "decreaseReputation"
      | "defaultInitial"
      | "getLastContribution"
      | "getReputation"
      | "increaseReputation"
      | "isInitialized"
      | "owner"
      | "recordContribution"
      | "renounceOwnership"
      | "setDefaultInitial"
      | "setInitial"
      | "setTrustedCaller"
      | "transferOwnership"
      | "trustedCaller"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ContributionRecorded"
      | "OwnershipTransferred"
      | "ReputationDecreased"
      | "ReputationIncreased"
      | "ReputationSet"
      | "TrustedCallerUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "decreaseReputation",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultInitial",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastContribution",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReputation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseReputation",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recordContribution",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultInitial",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInitial",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedCaller",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedCaller",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "decreaseReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultInitial",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultInitial",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setInitial", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedCaller",
    data: BytesLike
  ): Result;
}

export namespace ContributionRecordedEvent {
  export type InputTuple = [user: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [user: string, timestamp: bigint];
  export interface OutputObject {
    user: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReputationDecreasedEvent {
  export type InputTuple = [user: AddressLike, newScore: BigNumberish];
  export type OutputTuple = [user: string, newScore: bigint];
  export interface OutputObject {
    user: string;
    newScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReputationIncreasedEvent {
  export type InputTuple = [user: AddressLike, newScore: BigNumberish];
  export type OutputTuple = [user: string, newScore: bigint];
  export interface OutputObject {
    user: string;
    newScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReputationSetEvent {
  export type InputTuple = [user: AddressLike, score: BigNumberish];
  export type OutputTuple = [user: string, score: bigint];
  export interface OutputObject {
    user: string;
    score: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrustedCallerUpdatedEvent {
  export type InputTuple = [who: AddressLike, allowed: boolean];
  export type OutputTuple = [who: string, allowed: boolean];
  export interface OutputObject {
    who: string;
    allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Reputation extends BaseContract {
  connect(runner?: ContractRunner | null): Reputation;
  waitForDeployment(): Promise<this>;

  interface: ReputationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  decreaseReputation: TypedContractMethod<
    [user: AddressLike, pts: BigNumberish],
    [void],
    "nonpayable"
  >;

  defaultInitial: TypedContractMethod<[], [bigint], "view">;

  getLastContribution: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getReputation: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  increaseReputation: TypedContractMethod<
    [user: AddressLike, pts: BigNumberish],
    [void],
    "nonpayable"
  >;

  isInitialized: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  recordContribution: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setDefaultInitial: TypedContractMethod<
    [v: BigNumberish],
    [void],
    "nonpayable"
  >;

  setInitial: TypedContractMethod<
    [user: AddressLike, score: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTrustedCaller: TypedContractMethod<
    [who: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  trustedCaller: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "decreaseReputation"
  ): TypedContractMethod<
    [user: AddressLike, pts: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "defaultInitial"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLastContribution"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getReputation"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "increaseReputation"
  ): TypedContractMethod<
    [user: AddressLike, pts: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isInitialized"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recordContribution"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDefaultInitial"
  ): TypedContractMethod<[v: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setInitial"
  ): TypedContractMethod<
    [user: AddressLike, score: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTrustedCaller"
  ): TypedContractMethod<
    [who: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "trustedCaller"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getEvent(
    key: "ContributionRecorded"
  ): TypedContractEvent<
    ContributionRecordedEvent.InputTuple,
    ContributionRecordedEvent.OutputTuple,
    ContributionRecordedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ReputationDecreased"
  ): TypedContractEvent<
    ReputationDecreasedEvent.InputTuple,
    ReputationDecreasedEvent.OutputTuple,
    ReputationDecreasedEvent.OutputObject
  >;
  getEvent(
    key: "ReputationIncreased"
  ): TypedContractEvent<
    ReputationIncreasedEvent.InputTuple,
    ReputationIncreasedEvent.OutputTuple,
    ReputationIncreasedEvent.OutputObject
  >;
  getEvent(
    key: "ReputationSet"
  ): TypedContractEvent<
    ReputationSetEvent.InputTuple,
    ReputationSetEvent.OutputTuple,
    ReputationSetEvent.OutputObject
  >;
  getEvent(
    key: "TrustedCallerUpdated"
  ): TypedContractEvent<
    TrustedCallerUpdatedEvent.InputTuple,
    TrustedCallerUpdatedEvent.OutputTuple,
    TrustedCallerUpdatedEvent.OutputObject
  >;

  filters: {
    "ContributionRecorded(address,uint256)": TypedContractEvent<
      ContributionRecordedEvent.InputTuple,
      ContributionRecordedEvent.OutputTuple,
      ContributionRecordedEvent.OutputObject
    >;
    ContributionRecorded: TypedContractEvent<
      ContributionRecordedEvent.InputTuple,
      ContributionRecordedEvent.OutputTuple,
      ContributionRecordedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ReputationDecreased(address,uint256)": TypedContractEvent<
      ReputationDecreasedEvent.InputTuple,
      ReputationDecreasedEvent.OutputTuple,
      ReputationDecreasedEvent.OutputObject
    >;
    ReputationDecreased: TypedContractEvent<
      ReputationDecreasedEvent.InputTuple,
      ReputationDecreasedEvent.OutputTuple,
      ReputationDecreasedEvent.OutputObject
    >;

    "ReputationIncreased(address,uint256)": TypedContractEvent<
      ReputationIncreasedEvent.InputTuple,
      ReputationIncreasedEvent.OutputTuple,
      ReputationIncreasedEvent.OutputObject
    >;
    ReputationIncreased: TypedContractEvent<
      ReputationIncreasedEvent.InputTuple,
      ReputationIncreasedEvent.OutputTuple,
      ReputationIncreasedEvent.OutputObject
    >;

    "ReputationSet(address,uint256)": TypedContractEvent<
      ReputationSetEvent.InputTuple,
      ReputationSetEvent.OutputTuple,
      ReputationSetEvent.OutputObject
    >;
    ReputationSet: TypedContractEvent<
      ReputationSetEvent.InputTuple,
      ReputationSetEvent.OutputTuple,
      ReputationSetEvent.OutputObject
    >;

    "TrustedCallerUpdated(address,bool)": TypedContractEvent<
      TrustedCallerUpdatedEvent.InputTuple,
      TrustedCallerUpdatedEvent.OutputTuple,
      TrustedCallerUpdatedEvent.OutputObject
    >;
    TrustedCallerUpdated: TypedContractEvent<
      TrustedCallerUpdatedEvent.InputTuple,
      TrustedCallerUpdatedEvent.OutputTuple,
      TrustedCallerUpdatedEvent.OutputObject
    >;
  };
}
