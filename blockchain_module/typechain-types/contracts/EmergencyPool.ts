/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace EmergencyPool {
  export type ClaimStruct = {
    claimant: AddressLike;
    round: BigNumberish;
    eventId: BytesLike;
    evidenceURI: string;
    status: BigNumberish;
    submittedAt: BigNumberish;
    verifiedAt: BigNumberish;
  };

  export type ClaimStructOutput = [
    claimant: string,
    round: bigint,
    eventId: string,
    evidenceURI: string,
    status: bigint,
    submittedAt: bigint,
    verifiedAt: bigint
  ] & {
    claimant: string;
    round: bigint;
    eventId: string;
    evidenceURI: string;
    status: bigint;
    submittedAt: bigint;
    verifiedAt: bigint;
  };
}

export interface EmergencyPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "adminWithdrawInsurance"
      | "claims"
      | "claimsByRound"
      | "claimsByUser"
      | "getClaim"
      | "getClaimsForRound"
      | "getClaimsOfUser"
      | "insuranceBalance"
      | "nextClaimId"
      | "owner"
      | "receiveInsuranceContribution"
      | "renounceOwnership"
      | "submitClaim"
      | "token"
      | "transferOwnership"
      | "verifyClaim"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimSubmitted"
      | "ClaimVerified"
      | "InsuranceReceived"
      | "InsuranceWithdrawn"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "adminWithdrawInsurance",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claims",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimsByRound",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimsByUser",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimsForRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimsOfUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "insuranceBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextClaimId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receiveInsuranceContribution",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitClaim",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyClaim",
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "adminWithdrawInsurance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claims", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimsByRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimsByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClaimsForRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimsOfUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insuranceBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextClaimId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveInsuranceContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyClaim",
    data: BytesLike
  ): Result;
}

export namespace ClaimSubmittedEvent {
  export type InputTuple = [
    claimId: BigNumberish,
    who: AddressLike,
    round: BigNumberish,
    eventId: BytesLike
  ];
  export type OutputTuple = [
    claimId: bigint,
    who: string,
    round: bigint,
    eventId: string
  ];
  export interface OutputObject {
    claimId: bigint;
    who: string;
    round: bigint;
    eventId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimVerifiedEvent {
  export type InputTuple = [claimId: BigNumberish, approved: boolean];
  export type OutputTuple = [claimId: bigint, approved: boolean];
  export interface OutputObject {
    claimId: bigint;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InsuranceReceivedEvent {
  export type InputTuple = [from: AddressLike, amount: BigNumberish];
  export type OutputTuple = [from: string, amount: bigint];
  export interface OutputObject {
    from: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InsuranceWithdrawnEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EmergencyPool extends BaseContract {
  connect(runner?: ContractRunner | null): EmergencyPool;
  waitForDeployment(): Promise<this>;

  interface: EmergencyPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  adminWithdrawInsurance: TypedContractMethod<
    [amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  claims: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, string, bigint, bigint, bigint] & {
        claimant: string;
        round: bigint;
        eventId: string;
        evidenceURI: string;
        status: bigint;
        submittedAt: bigint;
        verifiedAt: bigint;
      }
    ],
    "view"
  >;

  claimsByRound: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  claimsByUser: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getClaim: TypedContractMethod<
    [claimId: BigNumberish],
    [EmergencyPool.ClaimStructOutput],
    "view"
  >;

  getClaimsForRound: TypedContractMethod<
    [round: BigNumberish],
    [bigint[]],
    "view"
  >;

  getClaimsOfUser: TypedContractMethod<[who: AddressLike], [bigint[]], "view">;

  insuranceBalance: TypedContractMethod<[], [bigint], "view">;

  nextClaimId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  receiveInsuranceContribution: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  submitClaim: TypedContractMethod<
    [eventId: BytesLike, evidenceURI: string, round: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  token: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  verifyClaim: TypedContractMethod<
    [claimId: BigNumberish, approved: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "adminWithdrawInsurance"
  ): TypedContractMethod<
    [amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claims"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, string, bigint, bigint, bigint] & {
        claimant: string;
        round: bigint;
        eventId: string;
        evidenceURI: string;
        status: bigint;
        submittedAt: bigint;
        verifiedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimsByRound"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimsByUser"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getClaim"
  ): TypedContractMethod<
    [claimId: BigNumberish],
    [EmergencyPool.ClaimStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getClaimsForRound"
  ): TypedContractMethod<[round: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getClaimsOfUser"
  ): TypedContractMethod<[who: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "insuranceBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextClaimId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "receiveInsuranceContribution"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitClaim"
  ): TypedContractMethod<
    [eventId: BytesLike, evidenceURI: string, round: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyClaim"
  ): TypedContractMethod<
    [claimId: BigNumberish, approved: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ClaimSubmitted"
  ): TypedContractEvent<
    ClaimSubmittedEvent.InputTuple,
    ClaimSubmittedEvent.OutputTuple,
    ClaimSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimVerified"
  ): TypedContractEvent<
    ClaimVerifiedEvent.InputTuple,
    ClaimVerifiedEvent.OutputTuple,
    ClaimVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "InsuranceReceived"
  ): TypedContractEvent<
    InsuranceReceivedEvent.InputTuple,
    InsuranceReceivedEvent.OutputTuple,
    InsuranceReceivedEvent.OutputObject
  >;
  getEvent(
    key: "InsuranceWithdrawn"
  ): TypedContractEvent<
    InsuranceWithdrawnEvent.InputTuple,
    InsuranceWithdrawnEvent.OutputTuple,
    InsuranceWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "ClaimSubmitted(uint256,address,uint256,bytes32)": TypedContractEvent<
      ClaimSubmittedEvent.InputTuple,
      ClaimSubmittedEvent.OutputTuple,
      ClaimSubmittedEvent.OutputObject
    >;
    ClaimSubmitted: TypedContractEvent<
      ClaimSubmittedEvent.InputTuple,
      ClaimSubmittedEvent.OutputTuple,
      ClaimSubmittedEvent.OutputObject
    >;

    "ClaimVerified(uint256,bool)": TypedContractEvent<
      ClaimVerifiedEvent.InputTuple,
      ClaimVerifiedEvent.OutputTuple,
      ClaimVerifiedEvent.OutputObject
    >;
    ClaimVerified: TypedContractEvent<
      ClaimVerifiedEvent.InputTuple,
      ClaimVerifiedEvent.OutputTuple,
      ClaimVerifiedEvent.OutputObject
    >;

    "InsuranceReceived(address,uint256)": TypedContractEvent<
      InsuranceReceivedEvent.InputTuple,
      InsuranceReceivedEvent.OutputTuple,
      InsuranceReceivedEvent.OutputObject
    >;
    InsuranceReceived: TypedContractEvent<
      InsuranceReceivedEvent.InputTuple,
      InsuranceReceivedEvent.OutputTuple,
      InsuranceReceivedEvent.OutputObject
    >;

    "InsuranceWithdrawn(address,uint256)": TypedContractEvent<
      InsuranceWithdrawnEvent.InputTuple,
      InsuranceWithdrawnEvent.OutputTuple,
      InsuranceWithdrawnEvent.OutputObject
    >;
    InsuranceWithdrawn: TypedContractEvent<
      InsuranceWithdrawnEvent.InputTuple,
      InsuranceWithdrawnEvent.OutputTuple,
      InsuranceWithdrawnEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
